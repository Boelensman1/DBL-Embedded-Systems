<?xml version="1.0" encoding="utf-8"?>
<project title="API Documentation" version="v2.8.1">
  <partials/>
  <file path="functions.php" generated-path="functions.html" hash="865fa918c8d37c109a4ad8f8e478c8f9" package="Default">
    <docblock line="0">
      <description>This file contains the functions of the compiler.</description>
      <long-description>Include this in your code for autocompletion.

PHP version 5

LICENSE:

Copyright (c) 2015 Wigger Boelens

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.</long-description>
      <tag name="package" line="0" description="Default"/>
      <tag name="author" line="0" description="Wigger Boelens" link="mailto:wigger.boelens@gmail.com"/>
      <tag name="copyright" line="0" description="2015 Wigger Boelens"/>
      <tag name="license" line="0" description="MIT License" link="http://www.opensource.org/licenses/mit-license.html"/>
      <tag name="version" line="0" description="v0.2"/>
    </docblock>
    <function namespace="" line="49" package="Default">
      <name>_storeRam</name>
      <full_name>\_storeRam()</full_name>
      <docblock line="49">
        <description>Store a value in the ram.</description>
        <long-description>Example: _storeRam($location,$value)</long-description>
        <tag name="package" line="49" description="Default"/>
        <tag name="param" line="49" description="&lt;p&gt;The location (a variable) to store the value in the ram&lt;/p&gt;" type="mixed" variable="$location">
          <type>mixed</type>
        </tag>
        <tag name="param" line="49" description="&lt;p&gt;The value to store, needs to be a variable&lt;/p&gt;" type="mixed" variable="$value">
          <type>mixed</type>
        </tag>
        <tag name="return" line="49" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$location</name>
        <default></default>
        <type>mixed</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$value</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="" line="62" package="Default">
      <name>_getRam</name>
      <full_name>\_getRam()</full_name>
      <docblock line="62">
        <description>Get a value from the ram.</description>
        <long-description>Example: $value=_getRam($location)</long-description>
        <tag name="package" line="62" description="Default"/>
        <tag name="param" line="62" description="&lt;p&gt;The location (a variable) where the value is stored&lt;/p&gt;" type="mixed" variable="$location">
          <type>mixed</type>
        </tag>
        <tag name="return" line="62" description="The value that is stored at the location" type="mixed">
          <type>mixed</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$location</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="" line="84" package="Default">
      <name>display</name>
      <full_name>\display()</full_name>
      <docblock line="84">
        <description>Display something on either the display or the leds</description>
        <long-description>Possible values for $onwhat:
leds: the leds at the top
leds2: the leds to the right
display: the display
Example:
display($value, 'display',000100)
This will display $value in the middle of the display</long-description>
        <tag name="package" line="84" description="Default"/>
        <tag name="param" line="84" description="&lt;p&gt;what to display&lt;/p&gt;" type="mixed" variable="$what">
          <type>mixed</type>
        </tag>
        <tag name="param" line="84" description="&lt;p&gt;on what to display&lt;/p&gt;" type="string" variable="$onWhat">
          <type>string</type>
        </tag>
        <tag name="param" line="84" description="&lt;p&gt;Where to show the value when using the display,&#10;                          defaults to the right position&lt;/p&gt;" type="string" variable="$location">
          <type>string</type>
        </tag>
        <tag name="return" line="84" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$what</name>
        <default></default>
        <type>mixed</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$onWhat</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$location</name>
        <default>'000001'</default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="99" package="Default">
      <name>pow</name>
      <full_name>\pow()</full_name>
      <docblock line="99">
        <description>Get the power of a number</description>
        <long-description>Example: pow(2,$variable)
This will make $variable equal to 2^$variable</long-description>
        <tag name="package" line="99" description="Default"/>
        <tag name="param" line="99" description="&lt;p&gt;the number to power with&lt;/p&gt;" type="integer" variable="$what">
          <type>integer</type>
        </tag>
        <tag name="param" line="99" description="&lt;p&gt;variable to power&lt;/p&gt;" type="mixed" variable="$variable">
          <type>mixed</type>
        </tag>
        <tag name="return" line="99" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$what</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$variable</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="" line="114" package="Default">
      <name>mod</name>
      <full_name>\mod()</full_name>
      <docblock line="114">
        <description>Take the mod of a number</description>
        <long-description>Example: mod($variable,2)
This will return the mod 2 of $variable</long-description>
        <tag name="package" line="114" description="Default"/>
        <tag name="param" line="114" description="&lt;p&gt;modulo what&lt;/p&gt;" type="integer" variable="$what">
          <type>integer</type>
        </tag>
        <tag name="param" line="114" description="&lt;p&gt;variable to modulo over&lt;/p&gt;" type="mixed" variable="$variable">
          <type>mixed</type>
        </tag>
        <tag name="return" line="114" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$what</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$variable</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="" line="130" package="Default">
      <name>getInput</name>
      <full_name>\getInput()</full_name>
      <docblock line="130">
        <description>Get button or analog input</description>
        <long-description>When you just want hte input of 1 button, use buttonPressed instead
Example: getInput($variable,'analog')
This will put the value of the analog into $variable</long-description>
        <tag name="package" line="130" description="Default"/>
        <tag name="param" line="130" description="&lt;p&gt;Variable to write the input to&lt;/p&gt;" type="mixed" variable="$writeTo">
          <type>mixed</type>
        </tag>
        <tag name="param" line="130" description="&lt;p&gt;Type of input, possible values are: buttons, analog&lt;/p&gt;" type="string" variable="$type">
          <type>string</type>
        </tag>
        <tag name="return" line="130" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$writeTo</name>
        <default></default>
        <type>mixed</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$type</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="144" package="Default">
      <name>_getButtonPressed</name>
      <full_name>\_getButtonPressed()</full_name>
      <docblock line="144">
        <description>Check if a button is pressed</description>
        <long-description>Puts the result into R5
Example: $pressed=buttonPressed($location);</long-description>
        <tag name="package" line="144" description="Default"/>
        <tag name="param" line="144" description="&lt;p&gt;Which button to check (input a variable)&lt;/p&gt;" type="mixed" variable="$button">
          <type>mixed</type>
        </tag>
        <tag name="return" line="144" description="Whether or not the button is pressed." type="integer">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$button</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="" line="161" package="Default">
      <name>installCountdown</name>
      <full_name>\installCountdown()</full_name>
      <docblock line="161">
        <description>Install the countdown</description>
        <long-description>Do not forget to add returnt at the end of the interrupt function
Example: installCountdown('timerInterrupt')
This will install the countdown.
In this example when the timer interrupt triggers,
the function timerInterrupt is ran.</long-description>
        <tag name="package" line="161" description="Default"/>
        <tag name="param" line="161" description="&lt;p&gt;The name of the function where the timer should go to&lt;/p&gt;" type="string" variable="$functionName">
          <type>string</type>
        </tag>
        <tag name="return" line="161" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$functionName</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="170" package="Default">
      <name>startCountdown</name>
      <full_name>\startCountdown()</full_name>
      <docblock line="170">
        <description>Start the countdown.</description>
        <long-description></long-description>
        <tag name="package" line="170" description="Default"/>
        <tag name="return" line="170" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
    </function>
    <function namespace="" line="181" package="Default">
      <name>pushStack</name>
      <full_name>\pushStack()</full_name>
      <docblock line="181">
        <description>Push a variable to the stack</description>
        <long-description></long-description>
        <tag name="package" line="181" description="Default"/>
        <tag name="param" line="181" description="&lt;p&gt;the variable to push to the stack&lt;/p&gt;" type="string" variable="$variable">
          <type>string</type>
        </tag>
        <tag name="return" line="181" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$variable</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="192" package="Default">
      <name>pullStack</name>
      <full_name>\pullStack()</full_name>
      <docblock line="192">
        <description>Pull a mixed from the stack</description>
        <long-description></long-description>
        <tag name="package" line="192" description="Default"/>
        <tag name="param" line="192" description="&lt;p&gt;the variable where the pulled variable is put into&lt;/p&gt;" type="string" variable="$variable">
          <type>string</type>
        </tag>
        <tag name="return" line="192" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$variable</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="207" package="Default">
      <name>setTimer</name>
      <full_name>\setTimer()</full_name>
      <docblock line="207">
        <description>Set the timer interrupt to a value.</description>
        <long-description>It will first reset the timer to 0.
Example: setTimer(10)
This will interrupt the program after 10 timer ticks</long-description>
        <tag name="package" line="207" description="Default"/>
        <tag name="param" line="207" description="&lt;p&gt;how long the timer should wait, in timer ticks&lt;/p&gt;" type="string" variable="$timer">
          <type>string</type>
        </tag>
        <tag name="return" line="207" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$timer</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="224" package="Default">
      <name>_getData</name>
      <full_name>\_getData()</full_name>
      <docblock line="224">
        <description>Get data</description>
        <long-description>Use offset 0 when it is just a single value.
Example: $data=_getData('data',1)
This will put the value of the data segment "data" at position 1, into $data.</long-description>
        <tag name="package" line="224" description="Default"/>
        <tag name="param" line="224" description="&lt;p&gt;The location where the variable is stored&lt;/p&gt;" type="string" variable="$location">
          <type>string</type>
        </tag>
        <tag name="param" line="224" description="&lt;p&gt;The offset of the location&lt;/p&gt;" type="integer" variable="$offset">
          <type>integer</type>
        </tag>
        <tag name="return" line="224" description="The value of the data segment" type="mixed">
          <type>mixed</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$location</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$offset</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="241" package="Default">
      <name>_storeData</name>
      <full_name>\_storeData()</full_name>
      <docblock line="241">
        <description>Store data</description>
        <long-description>Use offset 0 when it is just a single value.
Example: _storeData($data,'data',1)
This will put the value of $data into the data segment "data" at position 1</long-description>
        <tag name="package" line="241" description="Default"/>
        <tag name="param" line="241" description="&lt;p&gt;The variable to store&lt;/p&gt;" type="mixed" variable="$variable">
          <type>mixed</type>
        </tag>
        <tag name="param" line="241" description="&lt;p&gt;The name of the location where the variable is stored&lt;/p&gt;" type="string" variable="$location">
          <type>string</type>
        </tag>
        <tag name="param" line="241" description="&lt;p&gt;The offset of the location&lt;/p&gt;" type="integer" variable="$offset">
          <type>integer</type>
        </tag>
        <tag name="return" line="241" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$variable</name>
        <default></default>
        <type>mixed</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$location</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$offset</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="257" package="Default">
      <name>sleep</name>
      <full_name>\sleep()</full_name>
      <docblock line="257">
        <description>Pause the program</description>
        <long-description>Example:
sleep(10)
This will sleep for 10 clockticks</long-description>
        <tag name="package" line="257" description="Default"/>
        <tag name="param" line="257" description="&lt;p&gt;How long to sleep&lt;/p&gt;" type="integer" variable="$howLong">
          <type>integer</type>
        </tag>
        <tag name="return" line="257" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$howLong</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="275" package="Default">
      <name>initVar</name>
      <full_name>\initVar()</full_name>
      <docblock line="275">
        <description>Init a variable that is used in that data segment</description>
        <long-description>Example:
initVar('outputs', 10);
This will init the data segement outputs and reserve 10 spots
If you just want to save a single variable, set $places to 1</long-description>
        <tag name="package" line="275" description="Default"/>
        <tag name="param" line="275" description="&lt;p&gt;The name of the variable&lt;/p&gt;" type="string" variable="$variable">
          <type>string</type>
        </tag>
        <tag name="param" line="275" description="&lt;p&gt;How long the array is&lt;/p&gt;" type="integer" variable="$places">
          <type>integer</type>
        </tag>
        <tag name="return" line="275" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$variable</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$places</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="291" package="Default">
      <name>branch</name>
      <full_name>\branch()</full_name>
      <docblock line="291">
        <description>branch to a function</description>
        <long-description>Example:
branch('test');
This will branch to the function test</long-description>
        <tag name="package" line="291" description="Default"/>
        <tag name="param" line="291" description="&lt;p&gt;where to branch to&lt;/p&gt;" type="string" variable="$branchTO">
          <type>string</type>
        </tag>
        <tag name="return" line="291" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$branchTO</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <parse_markers>
      <error line="49" code="PPC:ERR-50015">Argument $location is missing from the Docblock of _storeRam</error>
      <error line="62" code="PPC:ERR-50015">Argument $location is missing from the Docblock of _getRam</error>
      <error line="84" code="PPC:ERR-50015">Argument $what is missing from the Docblock of display</error>
      <error line="99" code="PPC:ERR-50015">Argument $what is missing from the Docblock of pow</error>
      <error line="114" code="PPC:ERR-50015">Argument $what is missing from the Docblock of mod</error>
      <error line="130" code="PPC:ERR-50015">Argument $writeTo is missing from the Docblock of getInput</error>
      <error line="144" code="PPC:ERR-50015">Argument $button is missing from the Docblock of _getButtonPressed</error>
      <error line="161" code="PPC:ERR-50015">Argument $functionName is missing from the Docblock of installCountdown</error>
      <error line="181" code="PPC:ERR-50015">Argument $variable is missing from the Docblock of pushStack</error>
      <error line="192" code="PPC:ERR-50015">Argument $variable is missing from the Docblock of pullStack</error>
      <error line="207" code="PPC:ERR-50015">Argument $timer is missing from the Docblock of setTimer</error>
      <error line="224" code="PPC:ERR-50015">Argument $location is missing from the Docblock of _getData</error>
      <error line="241" code="PPC:ERR-50015">Argument $variable is missing from the Docblock of _storeData</error>
      <error line="257" code="PPC:ERR-50015">Argument $howLong is missing from the Docblock of sleep</error>
      <error line="275" code="PPC:ERR-50015">Argument $variable is missing from the Docblock of initVar</error>
      <error line="291" code="PPC:ERR-50015">Argument $branchTO is missing from the Docblock of branch</error>
    </parse_markers>
    <source>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</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="global" full_name="global"/>
  <namespace name="global" full_name="global"/>
  <deprecated count="0"/>
</project>
